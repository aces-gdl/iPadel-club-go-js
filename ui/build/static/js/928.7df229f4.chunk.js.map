{"version":3,"file":"static/js/928.7df229f4.chunk.js","mappings":"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","sources":["layout/MainCard.js","pages/ImageUploadPage.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\n\n// constant\nconst headerSX = {\n    '& .MuiCardHeader-action': { mr: 0 }\n};\n\n// ==============================|| CUSTOM MAIN CARD ||============================== //\n\nconst MainCard = forwardRef(\n    (\n        {\n            border = true,\n            boxShadow,\n            children,\n            content = true,\n            contentClass = '',\n            contentSX = {},\n            darkTitle,\n            secondary,\n            shadow,\n            sx = {},\n            title,\n            ...others\n        },\n        ref\n    ) => {\n        const theme = useTheme();\n\n        return (\n            <Card\n                ref={ref}\n                {...others}\n                sx={{\n                    border: border ? '1px solid' : 'none',\n                    borderColor: theme.palette.primary[200] + 25,\n                    ':hover': {\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\n                    },\n                    ...sx\n                }}\n            >\n                {/* card header and action */}\n                {title && \n                    ( <CardHeader sx={headerSX} title={ darkTitle? <Typography variant=\"h3\">{title}</Typography> : title } action={secondary} /> )\n                } \n\n                {/* content & header divider */}\n                {title && <Divider />}\n\n                {/* card content */}\n                {content && (\n                    <CardContent sx={contentSX} className={contentClass}>\n                        {children}\n                    </CardContent>\n                )}\n                {!content && children}\n            </Card>\n        );\n    }\n);\n\nMainCard.propTypes = {\n    border: PropTypes.bool,\n    boxShadow: PropTypes.bool,\n    children: PropTypes.node,\n    content: PropTypes.bool,\n    contentClass: PropTypes.string,\n    contentSX: PropTypes.object,\n    darkTitle: PropTypes.bool,\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    shadow: PropTypes.string,\n    sx: PropTypes.object,\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\n};\n\nexport default MainCard;\n","import React, { useState } from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  TextField,\n  Button,\n  Box,\n  Typography,\n  Container,\n  Paper,\n  Snackbar,\n  Alert,\n  Input,\n} from '@mui/material';\nimport MainCard from '../layout/MainCard';\nimport axios from 'axios';\n\nconst validationSchema = Yup.object({\n  id: Yup.string().required('ID es requerido'),\n  name: Yup.string().required('Nombre es requerido'),\n  image: Yup.mixed().required('Imagen es requerida'),\n});\n\nconst ImageUploadPage = () => {\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n\n  const formik = useFormik({\n    initialValues: {\n      id: '',\n      name: '',\n      image: null,\n    },\n    validationSchema: validationSchema,\n    onSubmit: async (values) => {\n      try {\n        const formData = new FormData();\n        formData.append('id', values.id);\n        formData.append('name', values.name);\n        formData.append('file', values.image);\n\n      let response = await axios.post('/v1/images/', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n\n        if (response.data.ImageName ) {\n          let payload = { \n            \"image_url\" : response.data.ImageName\n          }\n          response = axios.put(`/v1/catalogs/events/${values.id}`, payload);\n        }\n        setSnackbar({ open: true, message: 'Imagen subida exitosamente' , severity: 'success' });\n        formik.resetForm();\n        console.log('Response', response.data); \n        // TODO almacenar el nombre de la imagen en la base de datos o utilizarlo para mostrarla en el frontend.\n\n      } catch (error) {\n        console.error('Error al subir la imagen:', error);\n        setSnackbar({ open: true, message: 'Error al subir la imagen', severity: 'error' });\n      }\n    },\n  });\n\n  const handleImageChange = (event) => {\n    formik.setFieldValue('image', event.currentTarget.files[0]);\n  };\n\n  return (\n    <MainCard title=\"Subir Imagen\" minHeight={'300px'}>\n      <Container maxWidth=\"sm\">\n        <Paper elevation={3} style={{ padding: '2rem', marginTop: '2rem' }}>\n          <form onSubmit={formik.handleSubmit}>\n            <TextField\n              fullWidth\n              id=\"id\"\n              name=\"id\"\n              label=\"ID\"\n              value={formik.values.id}\n              onChange={formik.handleChange}\n              error={formik.touched.id && Boolean(formik.errors.id)}\n              helperText={formik.touched.id && formik.errors.id}\n              margin=\"normal\"\n            />\n            <TextField\n              fullWidth\n              id=\"name\"\n              name=\"name\"\n              label=\"Nombre\"\n              value={formik.values.name}\n              onChange={formik.handleChange}\n              error={formik.touched.name && Boolean(formik.errors.name)}\n              helperText={formik.touched.name && formik.errors.name}\n              margin=\"normal\"\n            />\n            <Box mt={2}>\n              <Input\n                type=\"file\"\n                inputProps={{ accept: 'image/*' }}\n                onChange={handleImageChange}\n              />\n              {formik.touched.image && formik.errors.image && (\n                <Typography color=\"error\">{formik.errors.image}</Typography>\n              )}\n            </Box>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              fullWidth\n              type=\"submit\"\n              style={{ marginTop: '1rem' }}\n            >\n              Subir Imagen\n            </Button>\n          </form>\n        </Paper>\n      </Container>\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n      >\n        <Alert onClose={() => setSnackbar({ ...snackbar, open: false })} severity={snackbar.severity}>\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </MainCard>\n  );\n};\n\nexport default ImageUploadPage;"],"names":["headerSX","mr","forwardRef","_ref","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","_objectWithoutProperties","_excluded","theme","useTheme","_jsxs","Card","_objectSpread","borderColor","palette","primary","_jsx","CardHeader","Typography","variant","action","Divider","CardContent","className","validationSchema","Yup","id","required","name","image","ImageUploadPage","snackbar","setSnackbar","useState","open","message","severity","formik","useFormik","initialValues","onSubmit","async","formData","FormData","append","values","response","axios","post","headers","data","ImageName","payload","put","concat","resetForm","console","log","error","MainCard","minHeight","Container","maxWidth","Paper","elevation","style","padding","marginTop","handleSubmit","TextField","fullWidth","label","value","onChange","handleChange","touched","Boolean","errors","helperText","margin","Box","mt","Input","type","inputProps","accept","event","setFieldValue","currentTarget","files","color","Button","Snackbar","autoHideDuration","onClose","Alert"],"sourceRoot":""}