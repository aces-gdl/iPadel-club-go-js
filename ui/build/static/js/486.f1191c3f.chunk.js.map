{"version":3,"file":"static/js/486.f1191c3f.chunk.js","mappings":"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","sources":["components/CategorySelect.js","components/EventSelect.js","layout/MainCard.js","pages/EventRegistration.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport axios from 'axios';\n\nconst CategorySelect = ({ name, value, label, handleupdate }) => {\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const response = await axios.get('/v1/catalogs/categories');\n        setCategories(response.data);\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n      }\n    };\n\n    fetchCategories();\n  }, []);\n\n\n  return (\n    <FormControl fullWidth>\n      <InputLabel id={`${name}-select-label`}>{label}</InputLabel>\n      <Select\n        labelId={`${name}-select-label`}\n        id={`${name}-select`}\n        value={value}\n        label={label}\n        onChange={handleupdate}\n        name={name}\n      >\n        {categories.map((category) => (\n          <MenuItem key={category.ID} value={category.ID}>\n            {category.description}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default CategorySelect;","import React, { useState, useEffect } from 'react';\nimport { FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport axios from 'axios';\n\nconst EventSelect = ({ name, value, label, handleupdate }) => {\n  const [events, setEvents] = useState([]);\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await axios.get('/v1/catalogs/events');\n        setEvents(response.data);\n      } catch (error) {\n        console.error('Error fetching events:', error);\n      }\n    };\n\n    fetchEvents();\n  }, []);\n\n\n  return (\n    <FormControl fullWidth>\n      <InputLabel id={`${name}-select-label`}>{label}</InputLabel>\n      <Select\n        labelId={`${name}-select-label`}\n        id={`${name}-select`}\n        value={value}\n        label={label}\n        onChange={handleupdate}\n        name={name}\n      >\n        {events.map((event) => (\n          <MenuItem key={event.ID} value={event.ID}>\n            {event.name}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default EventSelect;","import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\n\n// constant\nconst headerSX = {\n    '& .MuiCardHeader-action': { mr: 0 }\n};\n\n// ==============================|| CUSTOM MAIN CARD ||============================== //\n\nconst MainCard = forwardRef(\n    (\n        {\n            border = true,\n            boxShadow,\n            children,\n            content = true,\n            contentClass = '',\n            contentSX = {},\n            darkTitle,\n            secondary,\n            shadow,\n            sx = {},\n            title,\n            ...others\n        },\n        ref\n    ) => {\n        const theme = useTheme();\n\n        return (\n            <Card\n                ref={ref}\n                {...others}\n                sx={{\n                    border: border ? '1px solid' : 'none',\n                    borderColor: theme.palette.primary[200] + 25,\n                    ':hover': {\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\n                    },\n                    ...sx\n                }}\n            >\n                {/* card header and action */}\n                {title && \n                    ( <CardHeader sx={headerSX} title={ darkTitle? <Typography variant=\"h3\">{title}</Typography> : title } action={secondary} /> )\n                } \n\n                {/* content & header divider */}\n                {title && <Divider />}\n\n                {/* card content */}\n                {content && (\n                    <CardContent sx={contentSX} className={contentClass}>\n                        {children}\n                    </CardContent>\n                )}\n                {!content && children}\n            </Card>\n        );\n    }\n);\n\nMainCard.propTypes = {\n    border: PropTypes.bool,\n    boxShadow: PropTypes.bool,\n    children: PropTypes.node,\n    content: PropTypes.bool,\n    contentClass: PropTypes.string,\n    contentSX: PropTypes.object,\n    darkTitle: PropTypes.bool,\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    shadow: PropTypes.string,\n    sx: PropTypes.object,\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\n};\n\nexport default MainCard;\n","import React, { useState } from 'react';\nimport {\n    TextField,\n    Button,\n    Box,\n    Typography,\n    Container,\n    Paper,\n    Snackbar,\n    Alert\n} from '@mui/material';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport MainCard from '../layout/MainCard';\nimport EventSelect from '../components/EventSelect';\nimport CategorySelect from '../components/CategorySelect';\nimport axios from 'axios';\n\nconst validationSchema = Yup.object({\n    EventID: Yup.string().required('El evento es requerido'),\n    CategoryID: Yup.string().required('La categoría es requerida'),\n    partnerPhone: Yup.string().required('El teléfono del compañero es requerido').min(10, 'El teléfono debe tener al menos 10 dígitos'),\n});\nconst EventRegistration = () => {\n    const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n    const [person2_id, setPerson2_id] = useState(0);\n\n    const formik = useFormik({\n        initialValues: {\n            EventID: '',\n            CategoryID: '',\n            partnerPhone: '',\n            partnerName: '',\n        },\n        validationSchema: validationSchema,\n        onSubmit: async (values) => {\n            try {\n                let payload = {\n                    event_id: values.EventID,\n                    category_id: values.CategoryID,\n                    person1_id: JSON.parse(localStorage.getItem('user')).ID,\n                    person2_id: person2_id,\n                }\n                await axios.post('/v1/inscription', payload);\n                setSnackbar({ open: true, message: 'Inscripción exitosa', severity: 'success' });\n                formik.resetForm();\n            } catch (error) {\n                setSnackbar({ open: true, message: 'Error en la inscripción', severity: 'error' });\n            }\n        },\n    });\n\n    const handlePartnerPhoneChange = async (e) => {\n        const { value } = e.target;\n        formik.setFieldValue('partnerPhone', value);\n\n        if (value.length >= 10) {\n            try {\n                const response = await axios.get(`/v1/person/is-available?EventID=${formik.values.EventID}&Phone=${value}&CategoryID=${formik.values.CategoryID}`);    \n                if (response.data && response.data.data.name) {\n                    formik.setFieldValue('partnerName', `${response.data.data.name} ${response.data.data.lastName}`);\n                    setPerson2_id(response.data.data.ID);\n                } else {\n                    formik.setFieldValue('partnerName', '');\n                }\n            } catch (error) {\n                console.error('Error buscando usuario:', error.data.error);\n                setSnackbar({ open: true, message: 'Error buscando usuario', severity: 'error' });\n            }\n        }\n    };\n\n    return (\n        <MainCard title=\"Inscripción a Evento\" minHeight={'300px'}>\n            <Container maxWidth=\"sm\">\n                <Paper elevation={3} style={{ padding: '2rem', marginTop: '2rem' }}>\n                    <Typography variant=\"h6\" gutterBottom>\n                        Completa tu inscripción\n                    </Typography>\n                    <form onSubmit={formik.handleSubmit}>\n                        <EventSelect\n                            name='EventID'\n                            value={formik.values.EventID}\n                            label=\"Evento\"\n                            handleupdate={formik.handleChange}\n                            error={formik.touched.EventID && Boolean(formik.errors.EventID)}\n                            helperText={formik.touched.EventID && formik.errors.EventID}\n                        />\n                        <Box mt={2}>\n                            <CategorySelect\n                                name='CategoryID'\n                                value={formik.values.CategoryID}\n                                label=\"Categoría\"\n                                handleupdate={formik.handleChange}\n                                error={formik.touched.CategoryID && Boolean(formik.errors.CategoryID)}\n                                helperText={formik.touched.CategoryID && formik.errors.CategoryID}\n                            />\n                        </Box>\n                        <TextField\n                            fullWidth\n                            margin=\"normal\"\n                            name=\"partnerPhone\"\n                            label=\"Teléfono del compañero\"\n                            value={formik.values.partnerPhone}\n                            onChange={handlePartnerPhoneChange}\n                            error={formik.touched.partnerPhone && Boolean(formik.errors.partnerPhone)}\n                            helperText={formik.touched.partnerPhone && formik.errors.partnerPhone}\n                        />\n                        <TextField\n                            fullWidth\n                            margin=\"normal\"\n                            name=\"partnerName\"\n                            label=\"Nombre del compañero\"\n                            value={formik.values.partnerName}\n                            InputProps={{\n                                readOnly: true,\n                            }}\n                        />\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            fullWidth\n                            style={{ marginTop: '1rem' }}\n                        >\n                            Inscribirse\n                        </Button>\n                    </form>\n                </Paper>\n            </Container>\n            <Snackbar\n                open={snackbar.open}\n                autoHideDuration={6000}\n                onClose={() => setSnackbar({ ...snackbar, open: false })}\n            >\n                <Alert onClose={() => setSnackbar({ ...snackbar, open: false })} severity={snackbar.severity}>\n                    {snackbar.message}\n                </Alert>\n            </Snackbar>\n        </MainCard>\n    );\n};\n\nexport default EventRegistration;"],"names":["_ref","name","value","label","handleupdate","categories","setCategories","useState","useEffect","async","response","axios","get","data","error","console","fetchCategories","_jsxs","FormControl","fullWidth","children","_jsx","InputLabel","id","concat","Select","labelId","onChange","map","category","MenuItem","ID","description","events","setEvents","fetchEvents","event","headerSX","mr","forwardRef","ref","border","boxShadow","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","_objectWithoutProperties","_excluded","theme","useTheme","Card","_objectSpread","borderColor","palette","primary","CardHeader","Typography","variant","action","Divider","CardContent","className","validationSchema","Yup","EventID","required","CategoryID","partnerPhone","min","EventRegistration","snackbar","setSnackbar","open","message","severity","person2_id","setPerson2_id","formik","useFormik","initialValues","partnerName","onSubmit","payload","event_id","values","category_id","person1_id","JSON","parse","localStorage","getItem","post","resetForm","MainCard","minHeight","Container","maxWidth","Paper","elevation","style","padding","marginTop","gutterBottom","handleSubmit","EventSelect","handleChange","touched","Boolean","errors","helperText","Box","mt","CategorySelect","TextField","margin","e","target","setFieldValue","length","lastName","InputProps","readOnly","Button","type","color","Snackbar","autoHideDuration","onClose","Alert"],"sourceRoot":""}